.. _a315:

Part (E): fitness score generation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..  note:: 

    *   under construction
    *   what the fuck is **it**

Part (E) calls ``Part_E_Asym.sh`` if **it** is linear and
``/Loop_Parts/Part_E/Part_E_Curved.sh`` if it is nonlinear. Now that AraSim
has successfully run, we want to take the data recorded and extract the fitness
scores. The fitness scores determine how well each specific antenna performed;
we can use this information to compare it with other antennas with different
parameters. This way, we can determine which antenna performed the best. The
AraSim data for each generation is concatenated into one text file, where each
AraSim antenna output is separated by a space. This data is fed into
fitnessScores.exe, which will generate an individual fitness score for each
antenna based on the effective volume of ice observed. Finally, gensData.py will
extract useful information from the fitness scores and write to
maxFitnessScores.csv and gensData.csv, which give results about which performed
the best.

For NSECTIONS=1 it compiles fitnessFunction_ARA.cpp. For NSECTIONS$>$1 it
compiles fitnessFunction_ARA_Asym.cpp. Also, if we decide to evolve the
separation, we can do so, but only for NSECTIONS=1 and it would compile
fitnessFunction_ARA_Sep.cpp. The software knows which to compile and run
based on the settings indicated in Asym_XF_Loop.sh. Each of these determines
the maximum effective volume output by AraSim and uses this to figure out which
antennas should be parents for the next generation. 

One more thing to note is that this part is also set up to run an radius,
length, theta plotting software, but is not currently functional. This plotting
software would be better served for part (F) and should be transitioned there in
the future.



