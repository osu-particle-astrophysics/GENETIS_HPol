var NPOP = 50;
var indiv = 1;
//Factor of 1 frequency
var freq = [83.33, 100.00, 116.67, 133.33, 150.00, 166.67, 183.34, 200.00, 216.67, 233.34, 250.00, 266.67, 283.34, 300.00, 316.67, 333.34, 350.00, 366.67, 383.34, 400.01, 416.67, 433.34, 450.01, 466.67, 483.34, 500.01, 516.68, 533.34, 550.01, 566.68, 583.34, 600.01, 616.68, 633.34, 650.01, 666.68, 683.35, 700.01, 716.68, 733.35, 750.01, 766.68, 783.35, 800.01, 816.68, 833.35, 850.02, 866.68, 883.35, 900.02, 916.68, 933.35, 950.02, 966.68, 983.35, 1000.00, 1016.70, 1033.40, 1050.00, 1066.70] 
if(indiv==1){
App.saveCurrentProjectAs("/Users/Jason/Documents/OSU/GENETIS/GENETIS_HPol/Evolutionary_loop/Run_Outputs/2023_02_20_Symmetric_Run/2023_02_20_Symmetric_Run");
}
var path = "/Users/Jason/Documents/OSU/GENETIS/GENETIS_HPol/Evolutionary_loop/Generation_Data/generationDNA.csv";

//Factor of 1 frequency
//var freq = [83.33, 100.00, 116.67, 133.33, 150.00, 167.67, 183.34, 200.00, 216.67, 233.34, 250.00, 266.67, 283.34, 300.00, 316.67, 333.33, 350.00, 367.67, 383.34, 400.01, 416.67, 433.33, 450.01, 467.67, 483.34, 500.01, 516.68, 533.34, 550.01, 567.68, 583.34, 600.01, 616.68, 633.34, 650.01, 667.68, 683.34, 700.01, 716.67, 733.34, 750.01, 767.68, 783.34, 800.01, 816.68, 833.35, 850.02, 866.68, 883.35, 900.02, 916.68, 933.35, 950.02, 966.68, 983.35, 1000.00, 1016.70, 1033.40, 1050.00, 1066.70]

for(var j = 1;j<=NPOP;j++){
var m = j;

var freqCoefficients = 60 // This stores how many frequencies we're working with.
var headerLines = 7 // This is how many lines come before the frequency data
var antennaLines = 9 // This is how many lines come before the antenna data
var file = new File(path);
file.open(1);
var generationDNA = file.readAll();
var radii1=[];
var lengths1=[];
var A1=[];
var B1=[];
var radii2=[];
var lengths2=[];
var A2=[];
var B2=[];
var units = " cm";
var sepDist = 3.0;

// This macro imports data from generationDNA.csv to XF.
// It then generates simulations.
// OSU GENETIS team, last revision 2/5/2019

//Only take the lines with functions
//The following loop should iterate by NSECTIONS(currently 2)
//(i-antennaLines)/2 -> (i-antennaLines)/NSECTIONS
var lines = generationDNA.split('\n');
for(var i = 0;i < lines.length;i += 2){
	if(i==headerLines)
	{
		var frequencies = lines[i].split(",");
	}
	i--;
    if(i>=antennaLines)
        {
        var params = lines[i].split(",");
        radii1[(i-antennaLines)/2]=params[0];
        lengths1[(i-antennaLines)/2]=params[1];
	A1[(i-antennaLines)/2]=params[2];
		B1[(i-antennaLines)/2]=params[3];
        Output.println(radii1[(i-antennaLines)/2]);
        Output.println(lengths1[(i-antennaLines)/2]);
	Output.println(A1[(i-antennaLines)/2]);
		Output.println(B1[(i-antennaLines)/2]);
	var params2 = lines[i+1].split(",");
	radii2[(i-antennaLines)/2]=params2[0];
	lengths2[(i-antennaLines)/2]=params2[1];
	A2[(i-antennaLines)/2]=params2[2];
		B2[(i-antennaLines)/2]=params2[3];
	Output.println(radii2[(i-antennaLines)/2]);
	Output.println(lengths2[(i-antennaLines)/2]);
	Output.println(A2[(i-antennaLines)/2]);
		Output.println(B2[(i-antennaLines)/2]);
        }
}
file.close();
// make simulations for each individual for each frequency
for(var i = 0;i < NPOP;i++)
{
	if(i==m-1){
        	var antennaLength1 = lengths1[i];
        	var antennaRadius1 = radii1[i];
		var antennaA1 = A1[i];
		var antennaB1 = B1[i];
		var antennaLength2 = lengths2[i];
		var antennaRadius2 = radii2[i];
		var antennaA2 = A2[i];
		var antennaB2 = B2[i]; 
		//Actually create the material and then the antenna
        	CreatePEC();
        	CreateAntenna(i);
        	CreateAntennaSource();
        	CreateGrid();
		MakeImage(i);
        	CreateSensors();
        	CreateAntennaSimulationData();
        	QueueSimulation();
	}
}
}
function CreateAntenna(i)
{
	App.getActiveProject().getGeometryAssembly().clear();

        //create a new sketch - this is the base of the antenna
	var segment1 = new Sketch();
	var segment2 = new Sketch();
	var base1 = new Ellipse( new Cartesian3D(0,0,0), new Cartesian3D( antennaRadius1 + units,0,0 ), 1.0, 0.0, Math.PI*2 );
	var base2 = new Ellipse( new Cartesian3D(0,0,0), new Cartesian3D( antennaRadius2 + units,0,0 ), 1.0, 0.0, Math.PI*2 );
	segment1.addEdge(base1);
	segment2.addEdge(base2);

        //extrude function with a draft - 
	var extrudeLeft = new Extrude( segment1, antennaLength1 + units );
	var newOptionsLeft = extrudeLeft.getOptions();
	newOptionsLeft.draftLaw = "10*("+antennaA1+"*(x/10)^2+"+antennaB1+"*(x/10))";
	newOptionsLeft.draftOption = 4;
	extrudeLeft.setOptions ( newOptionsLeft );

        //create a recipe and model
	var segmentLeftRecipe = new Recipe();
	segmentLeftRecipe.append(extrudeLeft);
	var segmentLeftModel = new Model();
	segmentLeftModel.setRecipe(segmentLeftRecipe);
	segmentLeftModel.name = "Antenna Test Segment - Left " + (i+1);

		//add depth to the circle - right side
	extrudeRightDirection = CoordinateSystemDirection(0,0,-1);
	var extrudeRight = new Extrude( segment2, antennaLength2 + units, extrudeRightDirection );
	var newOptionsRight = extrudeRight.getOptions();
	newOptionsRight.draftLaw = "10*("+antennaA2+"*(x/10)^2+"+antennaB2+"*(x/10))";
	newOptionsRight.draftOption = 4;
	extrudeRight.setOptions ( newOptionsRight );

        //create a recipe and model
	var segmentRightRecipe = new Recipe();
	segmentRightRecipe.append(extrudeRight);
	var segmentRightModel = new Model();
	segmentRightModel.setRecipe(segmentRightRecipe);
	segmentRightModel.name = "Antenna Test Segment - Right " + (i+1);

        //set locations of the left and right segments
	segmentLeftModel.getCoordinateSystem().translate(new Cartesian3D(0,0,sepDist + units));
	var segmentInProject1 = App.getActiveProject().getGeometryAssembly().append(segmentLeftModel);
	segmentRightModel.getCoordinateSystem().translate(new Cartesian3D(0,0,0));
	var segmentInProject2 = App.getActiveProject().getGeometryAssembly().append(segmentRightModel);

        // Now set the material for the Antenna:
	var pecMaterial = App.getActiveProject().getMaterialList().getMaterial( "PEC" );
	if( null == pecMaterial )
	{
		Output.println( "\"PEC\" material was not found, could not associate with the antenna." );
	}
        else
        {
                App.getActiveProject().setMaterial( segmentInProject1, pecMaterial );
                App.getActiveProject().setMaterial( segmentInProject2, pecMaterial );
        }

        //zoom to view the extent of the creation
        View.zoomToExtents();
}

function CreatePEC() //borrowed from XF demo
{
    //Make the material.  We will use PEC, or Perfect Electrical Conductor:
    var pec = new Material();
    pec.name = "PEC";

    var pecProperties = new PEC();      // This is the electric properties that defines PEC
    var pecMagneticFreespace = new MagneticFreespace();     // We could make a material that acts as PEC and PMC, but in this case we just care about electrical components.
    var pecPhysicalMaterial = new PhysicalMaterial();
    pecPhysicalMaterial.setElectricProperties( pecProperties );
    pecPhysicalMaterial.setMagneticProperties( pecMagneticFreespace );
    pec.setDetails( pecPhysicalMaterial );

    // PEC is historically a "white" material, so we can easily change its appearance:
    var pecBodyAppearance = pec.getAppearance();
    var pecFaceAppearance = pecBodyAppearance.getFaceAppearance();  // The "face" appearance is the color/style associated with the surface of geometry objects
        pecFaceAppearance.setColor( new Color( 255, 255, 255, 255 ) );  // Set the surface color to white. (255 is the maximum intensity, these are in order R,G,B,A).

    // Check for an existing material
    if( null != App.getActiveProject().getMaterialList().getMaterial( pec.name ) )
    {
            App.getActiveProject().getMaterialList().removeMaterial( pec.name );
    }
	    App.getActiveProject().getMaterialList().addMaterial( pec );
    }


function CreateAntennaSource()
{
    // Here we will create our waveform, create our circuit component definition for the feed, and create
    // a CircuitComponent that will attach those to our current geometry.
    var waveformList = App.getActiveProject().getWaveformList();
        // clear the waveform list
	    waveformList.clear();

    // Create a gaussian derivative input wave
    var waveform = new Waveform();
    var GDer = new GaussianDerivativeWaveformShape ();
    GDer.pulseWidth = 2e-9;
    waveform.setWaveformShape( GDer );
    waveform.name ="Gaussian Derivative";
    var waveformInList = waveformList.addWaveform( waveform );

    // Now to create the circuit component definition:
    var componentDefinitionList = App.getActiveProject().getCircuitComponentDefinitionList();
    // clear the list
    componentDefinitionList.clear();

    // Create our Feed
    var feed = new Feed();
    feed.feedType = Feed.Voltage; // Set its type enumeration to be Voltage.
    // Define a 50-ohm resistance for this feed
    var rlc = new RLCSpecification();
    rlc.setResistance( "50 ohm" );
    rlc.setCapacitance( "0" );
    rlc.setInductance( "0" );
    feed.setImpedanceSpecification( rlc );
    feed.setWaveform( waveformInList );  // Make sure to use the reference that was returned by the list, or query the list directly
    feed.name = "50-Ohm Voltage Source";
    var feedInList = componentDefinitionList.addCircuitComponentDefinition( feed );

    // Now create a circuit component that will be the feed point for our simulation
    var componentList = App.getActiveProject().getCircuitComponentList();
    componentList.clear();

    var component = new CircuitComponent();
    component.name = "Source";
    component.setAsPort( true );
    // Define the endpoints of this feed - these are defined in world position, but you can also attach them to edges, faces, etc.
    var coordinate1 = new CoordinateSystemPosition( 0, 0, 0 );
    var coordinate2 = new CoordinateSystemPosition( 0, 0, sepDist + units );
    component.setCircuitComponentDefinition( feedInList );
    component.setEndpoint1( coordinate1 );
    component.setEndpoint2( coordinate2 );
    componentList.addCircuitComponent( component );
}

function CreateGrid()
{
    // Set up the grid spacing for the antenna
    var grid = App.getActiveProject().getGrid();
    var cellSizes = grid.getCellSizesSpecification();

    cellSizes.setTargetSizes( Cartesian3D( sepDist + units, sepDist + units, sepDist + units ) );
    // And we need to set the Minimum Sizes - these are the minimum deltas that we will allow in this project.
    // We'll use the scalar ratio of 20% here.
    cellSizes.setMinimumSizes( Cartesian3D( ".5", ".5", ".5" ) );
    cellSizes.setMinimumIsRatioX( true );
    cellSizes.setMinimumIsRatioY( true );
    cellSizes.setMinimumIsRatioZ( true );

    grid.specifyPaddingExtent( Cartesian3D( "20", "20", "20" ), Cartesian3D( "20", "20", "20" ), true, true );
}

function CreateSensors()
{
    // Here we will create a sensor definition and attach it to a near-field sensor on the surface of one of our objects.

    var sensorDataDefinitionList = App.getActiveProject().getSensorDataDefinitionList();
        sensorDataDefinitionList.clear();

    // Create a sensor
        var farSensor = new FarZoneSensor();
    farSensor.retrieveSteadyStateData = true;
       farSensor.setAngle1IncrementRadians(Math.PI/36.0);
    farSensor.setAngle2IncrementRadians(Math.PI/36.0);
       farSensor.name = "Far Zone Sensor";


    var FarZoneSensorList = App.getActiveProject().getFarZoneSensorList();
       FarZoneSensorList.clear();
    FarZoneSensorList.addFarZoneSensor( farSensor );
}



function CreateAntennaSimulationData()
{
    // This function modifies the NewSimulationData parameters of the project.
       // They're called "New" because they get applied every time we create an instance of this
    // project and place it on our simulation queue.
	var simData = App.getActiveProject().getNewSimulationData();
	var FOI = simData.getFOIParameters();
	FOI.clearAllSpecifiedFrequencies();
	FOI.foiSource = 1;
	for(var k = 0;k < 60;k++) {
		FOI.addSpecifiedFrequency(freq[k] + " MHz");
	}

    // These should already be set, however just to make sure the current project is set up correctly
       simData.excitationType = NewSimulationData.DiscreteSources;
    simData.enableSParameters = true;
}

function QueueSimulation()
{
   // Create and start the simulation. Project must be saved in order to run.
       var simulation = App.getActiveProject().createSimulation( false );

    Output.println( "Successfully created the simulation." );

    var projectId = simulation.getProjectId();
       var simulationId = simulation.getSimulationId();
    var numRuns = simulation.getRunCount();
}

function MakeImage(i)
{
        // This function orients the generated detector and saves it as a .png

        // Creates a new Camera and initializes its position
        if (i==0){
            newCam = Camera();
            newCam.setPosition(Cartesian3D('-1','10','-1'))

            // Adjusts project camera to the above coordinates
            View.setCamera(newCam);
            }

        // Zooms out to include the entire detector, then saves as a .png
        View.zoomToExtents();
        View.saveImageToFile(i+'_'+'detector.png', -1, -1);
}


App.quit();

